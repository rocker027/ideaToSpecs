#!/usr/bin/env node

// Test script for real Gemini CLI integration
import { spawn } from 'child_process';

console.log('üß™ Testing Real Gemini CLI Integration');
console.log('=====================================\n');

// Test 1: Check Gemini CLI availability
console.log('1. Checking Gemini CLI availability...');
try {
  const versionProcess = spawn('gemini', ['--version'], { stdio: 'pipe' });
  let versionOutput = '';
  
  versionProcess.stdout.on('data', (data) => {
    versionOutput += data.toString();
  });
  
  versionProcess.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Gemini CLI is available, version:', versionOutput.trim());
      testGeminiGeneration();
    } else {
      console.log('‚ùå Gemini CLI version check failed with code:', code);
    }
  });
  
  versionProcess.on('error', (err) => {
    console.log('‚ùå Gemini CLI not found or error:', err.message);
  });
} catch (error) {
  console.log('‚ùå Error checking Gemini CLI:', error.message);
}

// Test 2: Test actual specification generation
function testGeminiGeneration() {
  console.log('\n2. Testing specification generation...');
  
  const testIdea = 'Ë£Ω‰Ωú‰∏ÄÂÄãÁ∞°ÂñÆÁöÑÂæÖËæ¶‰∫ãÈ†ÖÁÆ°ÁêÜÊáâÁî®Á®ãÂºè';
  console.log('Test idea:', testIdea);
  
  const prompt = `Ë´ãÁÇ∫‰ª•‰∏ãÂâµÊÑèË£Ω‰Ωú‰∏Ä‰ªΩË©≥Áõ°ÁöÑÁî¢ÂìÅÈñãÁôºË¶èÊ†ºÊñáÊ™îÔºö„Äå${testIdea}„Äç

Ë´ãÂåÖÂê´‰ª•‰∏ãÁ´†ÁØÄÔºö
1. **Â∞àÊ°àÊ¶ÇËø∞** - Á∞°Ë¶ÅÊèèËø∞ÂíåÁõÆÊ®ô
2. **Ê†∏ÂøÉÂäüËÉΩ** - ‰∏ªË¶ÅÂäüËÉΩÂíåËÉΩÂäõ
3. **ÊäÄË°ìÈúÄÊ±Ç** - ÊäÄË°ìÊ£ßÂíåÊû∂Êßã
4. **Áî®Êà∂ÁïåÈù¢Ë®≠Ë®à** - UI/UX ËÄÉÈáè
5. **ÈñãÁôºË∑ØÁ∑öÂúñ** - ÂØ¶ÊñΩÈöéÊÆµÂíåÊôÇÈñìË°®
6. **ÊàêÂäüÊåáÊ®ô** - KPI ÂíåË°°ÈáèÊ®ôÊ∫ñ

Ë´ãÁî®‰πæÊ∑®ÁöÑ Markdown Ê†ºÂºèËº∏Âá∫ÔºåÂåÖÂê´ÈÅ©Áï∂ÁöÑÊ®ôÈ°å„ÄÅÈ†ÖÁõÆÁ¨¶ËôüÂíå‰ª£Á¢ºÂ°ä„ÄÇ‰ΩøÁî®Ë°®ÊÉÖÁ¨¶Ëôü‰ΩøÂÖ∂Êõ¥ÂÖ∑Ë¶ñË¶∫Âê∏ÂºïÂäõ„ÄÇ

Ëº∏Âá∫Ë™ûË®ÄÔºöÁπÅÈ´î‰∏≠Êñá
Ê†ºÂºèË¶ÅÊ±ÇÔºöMarkdown
ÂÖßÂÆπË¶ÅÊ±ÇÔºöÂ∞àÊ•≠„ÄÅË©≥Á¥∞„ÄÅÂèØÂü∑Ë°å`;

  const startTime = Date.now();
  console.log('üöÄ Starting Gemini CLI call...');
  
  const geminiProcess = spawn('gemini', ['-p', prompt], {
    stdio: ['pipe', 'pipe', 'pipe'],
    timeout: 60000 // 1 minute timeout for test
  });

  let output = '';
  let error = '';
  let dataReceived = 0;

  geminiProcess.stdout.on('data', (data) => {
    output += data.toString();
    dataReceived += data.length;
    console.log(`üì° Received data: ${Math.floor(dataReceived / 1024)}KB`);
  });

  geminiProcess.stderr.on('data', (data) => {
    error += data.toString();
  });

  geminiProcess.on('close', (code) => {
    const duration = Date.now() - startTime;
    
    if (code === 0) {
      console.log(`‚úÖ Gemini CLI completed successfully in ${duration}ms`);
      console.log(`üìä Output length: ${output.length} characters`);
      console.log(`üìù First 500 characters of output:`);
      console.log('---');
      console.log(output.substring(0, 500));
      console.log('---');
      
      if (output.length > 1000) {
        console.log('üéâ Test PASSED: Generated substantial specification content');
      } else {
        console.log('‚ö†Ô∏è  Test WARNING: Output seems too short');
      }
    } else {
      console.log(`‚ùå Gemini CLI failed with code ${code}`);
      console.log('Error output:', error);
    }
  });

  geminiProcess.on('error', (err) => {
    console.log('‚ùå Failed to start Gemini CLI:', err.message);
  });
  
  // Set a manual timeout
  setTimeout(() => {
    if (!geminiProcess.killed) {
      console.log('‚è∞ Timeout reached, killing process...');
      geminiProcess.kill('SIGTERM');
    }
  }, 65000);
}